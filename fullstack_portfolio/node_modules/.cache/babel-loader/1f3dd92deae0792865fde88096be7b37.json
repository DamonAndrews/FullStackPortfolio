{"ast":null,"code":"import decode from 'jwt-decode';\n\nclass AuthService {\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  loggedIn() {\n    const token = this.getToken(); // If there is a token and it's not expired, return `true`\n\n    return token && !this.isTokenExpired(token) ? true : false;\n  }\n\n  isTokenExpired(token) {\n    // Decode the token to get its expiration time that was set by the server\n    const decoded = decode(token); // If the expiration time is less than the current time (in seconds), the token is expired and we return `true`\n\n    if (decoded.exp < Date.now() / 1000) {\n      localStorage.removeItem('id_token');\n      return true;\n    } // If token hasn't passed its expiration time, return `false`\n\n\n    return false;\n  }\n\n  getToken() {\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    localStorage.setItem('id_token', idToken);\n    window.location.assign('/');\n  }\n\n  logout() {\n    localStorage.removeItem('id_token');\n    window.location.reload();\n  }\n\n}\n\nexport default new AuthService();","map":{"version":3,"names":["decode","AuthService","getProfile","getToken","loggedIn","token","isTokenExpired","decoded","exp","Date","now","localStorage","removeItem","getItem","login","idToken","setItem","window","location","assign","logout","reload"],"sources":["C:/Users/damon/OneDrive/Desktop/All_Projects/FullStackPortfolio/fullstack_portfolio/src/utils/auth.js"],"sourcesContent":["import decode from 'jwt-decode';\r\n\r\nclass AuthService {\r\n  getProfile() {\r\n    return decode(this.getToken());\r\n  }\r\n\r\n  loggedIn() {\r\n    const token = this.getToken();\r\n    // If there is a token and it's not expired, return `true`\r\n    return token && !this.isTokenExpired(token) ? true : false;\r\n  }\r\n\r\n  isTokenExpired(token) {\r\n    // Decode the token to get its expiration time that was set by the server\r\n    const decoded = decode(token);\r\n    // If the expiration time is less than the current time (in seconds), the token is expired and we return `true`\r\n    if (decoded.exp < Date.now() / 1000) {\r\n      localStorage.removeItem('id_token');\r\n      return true;\r\n    }\r\n    // If token hasn't passed its expiration time, return `false`\r\n    return false;\r\n  }\r\n\r\n  getToken() {\r\n    return localStorage.getItem('id_token');\r\n  }\r\n\r\n  login(idToken) {\r\n    localStorage.setItem('id_token', idToken);\r\n    window.location.assign('/');\r\n  }\r\n\r\n  logout() {\r\n    localStorage.removeItem('id_token');\r\n    window.location.reload();\r\n  }\r\n}\r\n\r\nexport default new AuthService();\r\n"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,YAAnB;;AAEA,MAAMC,WAAN,CAAkB;EAChBC,UAAU,GAAG;IACX,OAAOF,MAAM,CAAC,KAAKG,QAAL,EAAD,CAAb;EACD;;EAEDC,QAAQ,GAAG;IACT,MAAMC,KAAK,GAAG,KAAKF,QAAL,EAAd,CADS,CAET;;IACA,OAAOE,KAAK,IAAI,CAAC,KAAKC,cAAL,CAAoBD,KAApB,CAAV,GAAuC,IAAvC,GAA8C,KAArD;EACD;;EAEDC,cAAc,CAACD,KAAD,EAAQ;IACpB;IACA,MAAME,OAAO,GAAGP,MAAM,CAACK,KAAD,CAAtB,CAFoB,CAGpB;;IACA,IAAIE,OAAO,CAACC,GAAR,GAAcC,IAAI,CAACC,GAAL,KAAa,IAA/B,EAAqC;MACnCC,YAAY,CAACC,UAAb,CAAwB,UAAxB;MACA,OAAO,IAAP;IACD,CAPmB,CAQpB;;;IACA,OAAO,KAAP;EACD;;EAEDT,QAAQ,GAAG;IACT,OAAOQ,YAAY,CAACE,OAAb,CAAqB,UAArB,CAAP;EACD;;EAEDC,KAAK,CAACC,OAAD,EAAU;IACbJ,YAAY,CAACK,OAAb,CAAqB,UAArB,EAAiCD,OAAjC;IACAE,MAAM,CAACC,QAAP,CAAgBC,MAAhB,CAAuB,GAAvB;EACD;;EAEDC,MAAM,GAAG;IACPT,YAAY,CAACC,UAAb,CAAwB,UAAxB;IACAK,MAAM,CAACC,QAAP,CAAgBG,MAAhB;EACD;;AAnCe;;AAsClB,eAAe,IAAIpB,WAAJ,EAAf"},"metadata":{},"sourceType":"module"}